42FILECHECKER INFO:\n\nHere is the full standard output of the libft-unit-test running with your libft.\nSee also the clean logfile provided by the library at the following path:\n/sgoinfre/kmarchan/42FileChecker/libft-unit-test/result.log\n\n\n\n------------------------------------------------\n\n\n\n make re -C /sgoinfre/kmarchan/WeThinkCode/Libft 
rm -f *.o
rm -f libft.a
gcc -Wall -Werror -Wextra -c ft_putstr.c ft_putchar.c ft_putnbr.c ft_memset.c ft_putendl.c ft_bzero.c ft_memcpy.c ft_strlen.c ft_atoi.c ft_strcmp.c ft_strncmp.c ft_strdup.c ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c ft_strcpy.c  ft_strncpy.c ft_strrev.c ft_isupper.c ft_islower.c ft_toupper.c ft_tolower.c  
ar -rc libft.a *.o
ranlib libft.a
[  Cleaning #0  ]
âM-^^¤  rm -f obj/src/main.o obj/src/test_functions.o obj/src/display_test_result.o obj/src/signal.o obj/src/sandbox.o obj/src/bench_functions.o obj/src/additional_functions.o obj/hardcore-mode/hardcore-main.o obj/hardcore-mode/error.o obj/hardcore-mode/ncurses-display.o obj/hardcore-mode/test-init.o obj/hardcore-mode/test-utils.o obj/hardcore-mode/test-strcpy.o obj/hardcore-mode/test-strcmp.o obj/hardcore-mode/test-strncmp.o obj/hardcore-mode/test-memset.o obj/hardcore-mode/test-memcpy.o obj/hardcore-mode/test-memccpy.o obj/hardcore-mode/test-memmove.o obj/hardcore-mode/test-memchr.o obj/hardcore-mode/test-memcmp.o obj/hardcore-mode/test-strlen.o obj/hardcore-mode/test-strncpy.o obj/hardcore-mode/test-strcat.o obj/hardcore-mode/test-strncat.o obj/hardcore-mode/test-strchr.o obj/hardcore-mode/test-strrchr.o obj/hardcore-mode/test-strstr.o 
âM-^^¤  rm -f libft.so assets/libft.a assetslibtests assets/malloc.dylib 
âM-^^¤  rm -f run_test 
 make -j 3 -C /sgoinfre/kmarchan/WeThinkCode/Libft 
make[1]: `libft.a' is up to date.
 cp /sgoinfre/kmarchan/WeThinkCode/Libft/libft.a assets/ 
âM-^^¤  clang -shared -fPIC assets/tmp/ft_atoi.o assets/tmp/ft_bzero.o assets/tmp/ft_isalnum.o assets/tmp/ft_isalpha.o assets/tmp/ft_isascii.o assets/tmp/ft_isdigit.o assets/tmp/ft_islower.o assets/tmp/ft_isprint.o assets/tmp/ft_isupper.o assets/tmp/ft_memcpy.o assets/tmp/ft_memset.o assets/tmp/ft_putchar.o assets/tmp/ft_putendl.o assets/tmp/ft_putnbr.o assets/tmp/ft_putstr.o assets/tmp/ft_strcmp.o assets/tmp/ft_strcpy.o assets/tmp/ft_strdup.o assets/tmp/ft_strlen.o assets/tmp/ft_strncmp.o assets/tmp/ft_strncpy.o assets/tmp/ft_strrev.o assets/tmp/ft_tolower.o assets/tmp/ft_toupper.o -o libft.so 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/src/main.o -c src/main.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/src/test_functions.o -c src/test_functions.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/src/display_test_result.o -c src/display_test_result.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/src/signal.o -c src/signal.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/src/sandbox.o -c src/sandbox.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/src/bench_functions.o -c src/bench_functions.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/src/additional_functions.o -c src/additional_functions.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/hardcore-main.o -c hardcore-mode/hardcore-main.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/error.o -c hardcore-mode/error.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/ncurses-display.o -c hardcore-mode/ncurses-display.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-init.o -c hardcore-mode/test-init.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-utils.o -c hardcore-mode/test-utils.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strcpy.o -c hardcore-mode/test-strcpy.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strcmp.o -c hardcore-mode/test-strcmp.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strncmp.o -c hardcore-mode/test-strncmp.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-memset.o -c hardcore-mode/test-memset.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-memcpy.o -c hardcore-mode/test-memcpy.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-memccpy.o -c hardcore-mode/test-memccpy.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-memmove.o -c hardcore-mode/test-memmove.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-memchr.o -c hardcore-mode/test-memchr.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-memcmp.o -c hardcore-mode/test-memcmp.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strlen.o -c hardcore-mode/test-strlen.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strncpy.o -c hardcore-mode/test-strncpy.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strcat.o -c hardcore-mode/test-strcat.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strncat.o -c hardcore-mode/test-strncat.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strchr.o -c hardcore-mode/test-strchr.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strrchr.o -c hardcore-mode/test-strrchr.c 
[  Building #0  ]
âM-^^¤  clang -O2 -funroll-loops -Werror -Wall -Wextra -I./include -o obj/hardcore-mode/test-strstr.o -c hardcore-mode/test-strstr.c 
[  Linking #0  ]
âM-^^¤  clang -Werror -Wall -Wextra -O2 -funroll-loops -lncurses -o assets/libtests obj/src/main.o obj/src/test_functions.o obj/src/display_test_result.o obj/src/signal.o obj/src/sandbox.o obj/src/bench_functions.o obj/src/additional_functions.o obj/hardcore-mode/hardcore-main.o obj/hardcore-mode/error.o obj/hardcore-mode/ncurses-display.o obj/hardcore-mode/test-init.o obj/hardcore-mode/test-utils.o obj/hardcore-mode/test-strcpy.o obj/hardcore-mode/test-strcmp.o obj/hardcore-mode/test-strncmp.o obj/hardcore-mode/test-memset.o obj/hardcore-mode/test-memcpy.o obj/hardcore-mode/test-memccpy.o obj/hardcore-mode/test-memmove.o obj/hardcore-mode/test-memchr.o obj/hardcore-mode/test-memcmp.o obj/hardcore-mode/test-strlen.o obj/hardcore-mode/test-strncpy.o obj/hardcore-mode/test-strcat.o obj/hardcore-mode/test-strncat.o obj/hardcore-mode/test-strchr.o obj/hardcore-mode/test-strrchr.o obj/hardcore-mode/test-strstr.o
 clang -Werror -Wall -Wextra -dynamiclib assets/malloc.c -I ./include -o assets/malloc.dylib 
 clang -Werror -Wall -Wextra assets/wrapper.c -I ./include -o run_test 
RUNING TESTS:
                      First part
.-"-.     .-"-.     .-"-.     .-"-.     .-"-.     .-"-.
     "-.-"     "-.-"     "-.-"     "-.-"     "-.-"    
ft_memset:     [OK] [CRASH] [OK] [OK] [OK] [OK] [OK] 
[crash]: your memset return address is false/your memset does not work

ft_bzero:      [OK] [OK] [OK] [OK] 
ft_memcpy:     [OK] [CRASH] [OK] [OK] [OK] [OK] [CRASH] [OK] [OK] 
[crash]: your memcpy's return is false/doesn't work with basic params
[crash]: your memcpy crash cause it read/write too many bytes !

ft_memccpy:    [MISSING]
ft_memmove:    [MISSING]
ft_memchr:     [MISSING]
ft_memcmp:     [MISSING]
ft_strlen:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strdup:     [CRASH] [OK] [OK] [KO] [OK] [OK] [OK] 
[crash]: you didn't protect your malloc return
[KO]: your strdup did not allocate the good size so the \0 test may be false

ft_strcpy:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strncpy:    [FAILED] [OK] [FAILED] [FAILED] [OK] [FAILED] [FAILED] [FAILED] [OK] [OK] [OK] 
[fail]: your strncpy does not work with basic input
[fail]: your strncpy does not support unicode ?
[fail]: your strncpy does not work with an empty string
[fail]: your strncpy does not fill with \0 the rest of the dest buffer
[fail]: your strncpy put the bad number of \0 at the end of the string
[fail]: your strlcpy set a \0 at the end of the string if strlen(src) > n

ft_strcat:     [MISSING]
ft_strncat:    [MISSING]
ft_strlcat:    [MISSING]
ft_strchr:     [MISSING]
ft_strrchr:    [MISSING]
ft_strstr:     [MISSING]
ft_strnstr:    [MISSING]
ft_strcmp:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [FAILED] [FAILED] [OK] [OK] [OK] 
[fail]: your strcmp does not cast in unsigned the diff
[fail]: your strcmp does not work with non ascii chars

ft_strncmp:    [OK] [OK] [OK] [OK] [OK] [OK] [FAILED] [OK] [OK] [FAILED] [OK] [OK] [OK] 
[fail]: your strncmp does not cast in unsigned char the diff
[fail]: your strncmp does not work with non ascii chars

ft_atoi:       [FAILED] [FAILED] [FAILED] [FAILED] [OK] [OK] [FAILED] [FAILED] [FAILED] [KO] [KO] [KO] [KO] [OK] 
[fail]: your atoi does not work with positive numbers
[fail]: your atoi does not work with negative numbers
[fail]: your atoi does not work with random numbers
[fail]: your atoi is not working with blanks
[fail]: your atoi is not working with blanks
[fail]: your atoi does not work with int max value
[fail]: your atoi does not work with int min value
[KO]: your atoi does not work with long max value
[KO]: your atoi does not work with long min value
[KO]: your atoi does not work with over long max value
[KO]: your atoi does not work with over long min value

ft_isalpha:    [OK] 
ft_isdigit:    [OK] 
ft_isalnum:    [OK] 
ft_isascii:    [OK] 
ft_isprint:    [FAILED] 
[fail]: your isprint just doesn't work, REALLY ?!

ft_toupper:    [OK] 
ft_tolower:    [OK] 

In this part, you can choose to protect your function or not to,
a color code will tell you if your function is protected/not BUT stay coherent !
[ðM-^_M-^[¡ ] --> protected
[ðM-^_M-^R¥ ] --> not protected
                     Second part
 __)(__  __)(__  __)(__  __)(__  __)(__  __)(__  __)(__  __)
(______)(______)(______)(______)(______)(______)(______)(___

ft_memalloc:   [MISSING]
ft_memdel:     [MISSING]
ft_strnew:     [MISSING]
ft_strdel:     [MISSING]
ft_strclr:     [MISSING]
ft_striter:    [MISSING]
ft_striteri:   [MISSING]
ft_strmap:     [MISSING]
ft_strmapi:    [MISSING]
ft_strequ:     [MISSING]
ft_strnequ:    [MISSING]
ft_strsub:     [MISSING]
ft_strjoin:    [MISSING]
ft_strtrim:    [MISSING]
ft_strsplit:   [MISSING]
ft_itoa:       [MISSING]
ft_putchar:    [OK] [OK] [KO] 
[KO]: your putchar does not work with unicode

ft_putstr:     [OK] [OK] [ðM-^_M-^R¥ ] 
ft_putendl:    [OK] [OK] [ðM-^_M-^R¥ ] 
ft_putnbr:     [OK] [OK] [FAILED] [OK] [FAILED] 
[fail]: your putnbr does not work with int min
[fail]: your putnbr allocate memory, wtf ???

ft_putchar_fd: [MISSING]
ft_putstr_fd:  [MISSING]
ft_putendl_fd: [MISSING]
ft_putnbr_fd:  [MISSING]

 /~~~\/~~\/~~~\/~~~\/~~\/~~~\                    /~~~\/~~\/~~~\/~~~\/~~\/~~~\
 | /\/ /\/ /\ || /\/ /\/ /\ |                    | /\ \/\ \/\ || /\ \/\ \/\ |
  \ \/ /\/ /\/ /\ \/ /\/ /\/ /     Bonus part     \ \/\ \/\ \/ /\ \/\ \/\ \/ /
   \ \/\ \/\ \/  \ \/\ \/\ \/                      \/ /\/ /\/ /  \/ /\/ /\/ /
,_/\ \/\ \/\ \__/\ \/\ \/\ \______________________/ /\/ /\/ /\__/ /\/ /\/ /\_,
(__/\__/\__/\____/\__/\__/\________________________/\__/\__/\____/\__/\__/\__)

ft_islower:    [OK] 
ft_isupper:    [OK] dyld: warning: could not load inserted library './assets/malloc.dylib' into library validated process because no suitable image found.  Did find:
	./assets/malloc.dylib: code signing blocked mmap() of './assets/malloc.dylib'
	./assets/malloc.dylib: stat() failed with errno=1

See result.log for more informations !
